package com.pb.lesson12.number4;
/*    б) Создать интерфейсы "Мужская Одежда" с методом "одетьМужчину" и "Женская Одежда" с методом "одетьЖенщину".
        в) Создать абстрактный класс Одежда, содержащий переменные - размер одежды, стоимость, цвет.
        г) Создать классы наследники Одежды - Футболка (реализует интерфейсы "Мужская Одежда" и "Женская Одежда"),
        Штаны (реализует интерфейсы "Мужская Одежда" и "Женская Одежда"), Юбка (реализует интерфейсы "Женская Одежда"),
        Галстук (реализует интерфейсы "Мужская Одежда").
        д) Создать массив, содержащий все типы одежды. Создать класс Ателье, содержащий методы одетьЖенщину,
        одетьМужчину, на вход которых будет поступать массив, содержащий все типы одежды. Метод одетьЖенщину
        выводит на консоль всю информацию о женской одежде. То же самое для метода одетьМужчину.*/

public class Studio {

    void dressMan(Dress[] dress){
        for (Dress d: dress){
            if(d instanceof ClothForMen){
                ((ClothForMen) d).dressMan();// без этой строчки не работает. Здесь вызываем DressMan(). не пойму что, но что то не так
                System.out.println("Men " + d);
            }
        }
    }

    void dressWoman(Dress[] dress) {
        for (Dress d : dress) {
            if (d instanceof ClothForWomen) {
                ((ClothForWomen) d).dressWomen();
                System.out.println("Women " + d);
            }
        }
    }

    /*
    Саш, основная ошибка - почему ты задаешь свойства абстрактного класса в методах "одеть"?
    У тебя же штаны при конструировании получают размер в жизни. А по твоему коду получается,
    что штаны стретчевые и в зависимости от того, одевает их мужик или баба будут менять свой
    размер и даже цену в широких пределах :-)
    Короче, в конструкторе надо задавать пропертя.

    Ну и задача тоже припезденная
    Смотри:
    - интерфейс "одетьМужчину" вообще запрещен в ООП т.к. "одеть" это по идее метод самого мужчины.
    Т.е должен быть класс "Мужчина" которого будет метод "одеть", в который передадут что именно надо одеть,
    и тогда все будет по ООП.
    - в задаче не сказано, что ты должен вызывать у всех одежд метод "одеть...", хоть это и логично...
    Т.е. если бы задача была именно вызывать "одетьМужчину" у всех мужских одежд - ты все правильно сделал.
    У абстрактного класса нет методов "одетьМужчину" и "одетьЖенщину", соответственно ты проверил тип
    и если он совпал - привел к этому типу и вызвал метод.

    Но т.к. задача странная, то требуется лишь вывести информацию, а для этого не нужно дергать метод "одеть"
    Ну по крайней мере, если ты в конструкторе задаешь поля, что правильно т.к. цена одежды не должна определяться
    мужчина ли одевает или женщина.
    Вот так я сделал в методах ...Version2
     */
    void dressManVersion2(Dress[] dress){
        for (Dress d: dress){
            if(d instanceof ClothForMen){
                System.out.println("Men " + d);
            }
        }
    }

    void dressWomanVersion2(Dress[] dress) {
        for (Dress d : dress) {
            if (d instanceof ClothForWomen) {
                System.out.println("Women " + d);
            }
        }
    }

}
